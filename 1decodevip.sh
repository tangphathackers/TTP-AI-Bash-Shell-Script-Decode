#!/bin/bash
# Script ƒë·ªÉ gi·∫£i m√£ t·ªáp v√† l∆∞u v√†o th∆∞ m·ª•c ch·ªâ ƒë·ªãnh

# M·∫´u d√πng ƒë·ªÉ ph√°t hi·ªán c√°c ƒëo·∫°n m√£ c·∫ßn x·ª≠ l√Ω
pattern=###########################################################

# ƒê·∫∑t gi·ªõi h·∫°n stack size
ulimit -s unlimited >/dev/null 2>&1

# Bi·ªÉu t∆∞·ª£ng Unicode ƒë·ªÉ l√†m ƒë·∫πp
icon="üîê"
# ƒê·ªãnh nghƒ©a c√°c bi·∫øn m√†u
red='\e[0;31m'
green='\e[0;32m'
yellow='\e[0;33m'
blue='\e[0;34m'
cyan='\e[0;36m'
reset='\e[0m'
rainbow="${red}üáªüá≥ TTP-AI${green} Decode${yellow} Shell${blue} Bash${cyan}${reset} Script${red}${reset}"


# S·ªë l·∫ßn l·∫∑p ƒë·ªÉ t·∫°o ra hi·ªáu ·ª©ng load
total_iterations=10

# T√≠nh to√°n ng∆∞·ª°ng th·ªùi gian (0.3 gi√¢y) gi·ªØa m·ªói ph·∫ßn trƒÉm
threshold=1

# H√†m ƒë·ªÉ in ra h√¨nh ·∫£nh ƒë·ªông c·ªßa ph·∫ßn trƒÉm
print_percentage() {
    percentage=$1
    case $percentage in
        10) echo -n "${green}10%‚ñå‚ñå‚ñå‚ñå‚ñå‚ñå‚ñå‚ñå‚ñå " ;;
        20) echo -n "${green}20%‚ñà‚ñà‚ñà‚ñà‚ñå‚ñå‚ñå‚ñå‚ñå‚ñå " ;;
        30) echo -n "${green}30%‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå‚ñå‚ñå‚ñå‚ñå " ;;
        40) echo -n "${blue}40%‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå‚ñå‚ñå‚ñå " ;;
        50) echo -n "${blue}50%‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå‚ñå‚ñå " ;;
        60) echo -n "${blue}60%‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå‚ñå " ;;
        70) echo -n "${red}70%‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå " ;;
        80) echo -n "${red}80%‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà " ;;
        90) echo -n "${red}90%‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà " ;;
        100) echo -n "${cyan}100%‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà " ;;
    esac
}
echo ""
# S·ª≠ d·ª•ng v√≤ng l·∫∑p for truy·ªÅn th·ªëng v·ªõi bi·∫øn l√† s·ªë l·∫ßn l·∫∑p
for i in $(seq 1 $total_iterations); do
    # T√≠nh to√°n ph·∫ßn trƒÉm ho√†n th√†nh
    percent=$(( i * 10 ))

    # In ra h√¨nh ·∫£nh ƒë·ªông c·ªßa ph·∫ßn trƒÉm
    print_percentage $percent

    # T·∫°m d·ª´ng ch∆∞∆°ng tr√¨nh trong 0.3 gi√¢y
    sleep $threshold
    echo -ne "\r"  # X√≥a d√≤ng tr∆∞·ªõc ƒë√≥ tr√™n terminal
done

echo ""  # Xu·ªëng d√≤ng ƒë·ªÉ k·∫øt th√∫c


# T·∫°o th∆∞ m·ª•c n·∫øu kh√¥ng t·ªìn t·∫°i
decode_dir="/sdcard/TTP-AI/decode"
mkdir -p "$decode_dir"

# H√†m ƒë·ªÉ gi·∫£i m√£
dec() {
if grep -q -e '=.*;.*=.*;' \
-e 'base64 -d | sh$' \
-e 'xxd -p -r | sh$' \
-e 'base64 -d | bash$' \
-e '" | sh' \
-e "$pattern" "$(pwd)/$shuf.temp1.sh"; then
while true; do
if grep '=.*;.*=.*;' "$(pwd)/$shuf.temp1.sh"; then
sed 's/eval "\$/echo "\$/g; s/\[ "$(id -u)" -ne 2000 \]/! true/' "$(pwd)/$shuf.temp1.sh" > "$(pwd)/$shuf.temp2.sh"
bash "$(pwd)/$shuf.temp2.sh" > "$(pwd)/$shuf.temp1.sh"
rm "$(pwd)/$shuf.temp2.sh"
# base64
elif grep -q 'base64 -d | sh$' "$(pwd)/$shuf.temp1.sh"; then
sed 's/base64 -d | sh/base64 -d/; s/\[ "$(id -u)" -ne 2000 \]/! true/' "$(pwd)/$shuf.temp1.sh" > "$(pwd)/$shuf.temp2.sh"
bash "$(pwd)/$shuf.temp2.sh" > "$(pwd)/$shuf.temp1.sh"
rm "$(pwd)/$shuf.temp2.sh"
# xxd
elif grep -q 'xxd -p -r | sh$' "$(pwd)/$shuf.temp1.sh"; then
sed 's/xxd -p -r | sh/xxd -p -r/; s/\[ "$(id -u)" -ne 2000 \]/! true/' "$(pwd)/$shuf.temp1.sh" > "$(pwd)/$shuf.temp2.sh"
bash "$(pwd)/$shuf.temp2.sh" > "$(pwd)/$shuf.temp1.sh"
rm "$(pwd)/$shuf.temp2.sh"
# bash
elif grep -q 'base64 -d | bash$' "$(pwd)/$shuf.temp1.sh"; then
sed 's/base64 -d | bash/base64 -d/; s/\[ "$(id -u)" -ne 2000 \]/! true/' "$(pwd)/$shuf.temp1.sh" > "$(pwd)/$shuf.temp2.sh"
bash "$(pwd)/$shuf.temp2.sh" > "$(pwd)/$shuf.temp1.sh"
rm "$(pwd)/$shuf.temp2.sh"
# sh
elif grep -q '" | sh' "$(pwd)/$shuf.temp1.sh"; then
sed 's/\" | sh/\" > \"\$(pwd)\/$shuf.temp1.sh\"/g; s/\[ "$(id -u)" -ne 2000 \]/! true/" "$(pwd)/$shuf.temp1.sh' > "$(pwd)/$shuf.temp2.sh"
bash "$(pwd)/$shuf.temp2.sh"
rm "$(pwd)/$shuf.temp2.sh"
elif grep -q "$pattern" "$(pwd)/$shuf.temp1.sh"; then
cp "$(pwd)/$shuf.temp1.sh" "$(pwd)/$shuf.temp2.sh"
cat "$(pwd)/$shuf.temp2.sh" | grep -v '###########################################################' > "$(pwd)/$shuf.temp1.sh"
rm "$(pwd)/$shuf.temp2.sh"
else
break
fi
done
else
# gi·∫£i m√£ shc
for sec in $(seq 1 16); do
exec="$(pwd)/$shuf.temp1.sh"
"$exec" > /dev/null 2>&1 &
child=$!
sleep 0.0"$sec"
kill -STOP $child
cmdline=$(cat /proc/$child/cmdline)
echo "$cmdline" | sed 's/.*\(#!\)/\1/' | head -c "-$(echo "$exec" | wc -c)" > "$(pwd)/$shuf.temp2.sh"
kill -TERM $child
if grep -q '#!/' "$(pwd)/$shuf.temp2.sh"; then
break
else
rm "$(pwd)/$shuf.temp2.sh"
touch "$(pwd)/$shuf.temp2.sh"
fi
done
fi
mv "$(pwd)/$shuf.temp2.sh" "$(pwd)/$shuf.temp1.sh"
echo ""
}

# Hi·ªÉn th·ªã th√¥ng b√°o v√† y√™u c·∫ßu ng∆∞·ªùi d√πng nh·∫≠p ƒë∆∞·ªùng d·∫´n
echo ""
echo -e "$rainbow"
echo -e "${icon} ${red}Gi·∫£i m√£ base64, Gi·∫£i m√£ xxd, Gi·∫£i m√£ shc, Gi·∫£i m√£ bash-obfuscate, Gi·∫£i m√£ bash base64 üáªüá≥${reset}"
echo -e "${icon} ${blue}V√≠ d·ª•:${reset}"
echo -e "${icon} ${cyan} ƒê·∫ßu v√†o l√† m·ªôt file: /sdcard/script.sh${reset}"
echo -e "${icon} ${green} ƒê·∫ßu v√†o l√† m·ªôt th∆∞ m·ª•c: /sdcard/dir/${reset}"
echo -e "${icon} ${green} T·∫≠p tin gi·∫£i m√£ s·∫Ω l∆∞u trong: /sdcard/TTP-AI/decode/${reset}"
echo ""
printf "${icon} ${cyan}Nh·∫≠p ƒë∆∞·ªùng d·∫´n: ${reset}"
read -r input
shuf=$(shuf -i 1-100 -n 1)
echo ""
if [ -z "$(find "$input" -maxdepth 1 -type f)" ]; then
echo -e "${icon} ${green} C·∫£nh b√°o: Kh√¥ng t√¨m th·∫•y ƒë·∫ßu v√†o."
exit 1
fi

# L·∫∑p qua c√°c t·ªáp trong th∆∞ m·ª•c ƒë·∫ßu v√†o
find "$input" -maxdepth 1 -type f | while IFS= read -r file; do
cp "$file" "$(pwd)/$shuf.temp1.sh"
chmod +x "$(pwd)/$shuf.temp1.sh"
echo -e "${icon} ${green} ƒêang gi·∫£i m√£ $(basename "$file")"
dec > /dev/null 2>&1
if grep -q -e '=.*;.*=.*;' -e 'base64 -d | sh$' -e '" | sh' -e "$pattern" "$(pwd)/$shuf.temp1.sh"; then
dec > /dev/null 2>&1
fi
if [ -s "$(pwd)/$shuf.temp1.sh" ]; then
mv "$(pwd)/$shuf.temp1.sh" "$decode_dir/$(basename "$file").TTP-DECODE.sh"
echo -e "${icon} ${green} Th√†nh c√¥ng: Qu√° tr√¨nh gi·∫£i m√£ $(basename "$file") ƒë√£ ho√†n t·∫•t."
else
echo -e "${icon} ${red} Th·∫•t b·∫°i: Kh√¥ng th·ªÉ gi·∫£i m√£ $(basename "$file")."
rm "$(pwd)/$shuf.temp1.sh"
fi
done
echo ""
echo -e "${icon} ${green} ƒê√£ gi·∫£i m√£ xong. C√°c t·ªáp gi·∫£i m√£ ƒë∆∞·ª£c l∆∞u trong th∆∞ m·ª•c: $decode_dir"
